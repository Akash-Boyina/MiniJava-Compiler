//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
    int labelflag,procvar1,procvar2,procvar3;

   public GJDepthFirst(){
    this.labelflag = 0;
    this.procvar1 = -1;
    this.procvar2 = -1;
    this.procvar3 = -1;
   } 

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            labelflag = 1;
            e.nextElement().accept(this,argu);
            _count++;
         }
         labelflag = 0;
         return _ret;
      }
      else
        labelflag = 0;
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() ){
         labelflag = 1;
         return n.node.accept(this,argu);
      }
      else{
        labelflag = 0;
        return null;
      }
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( Procedure() )*
    * f13 -> VariablePackingInfo()
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      System.out.println("  .text\n  .globl  main");
      n.f0.accept(this, argu);
      System.out.println("main:");
      n.f1.accept(this, argu);
      procvar1 = Integer.parseInt(n.f2.accept(this, argu).toString());
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      procvar2 = Integer.parseInt(n.f5.accept(this, argu).toString());
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      procvar3 = Integer.parseInt(n.f8.accept(this, argu).toString());
      int stacksize = 4;
      if(procvar3 > 4){
        stacksize = 4+((procvar3-4)*4);
      }
      System.out.println("  move $fp, $sp\n  subu $sp, $sp, "+stacksize+"\n  sw $ra, -4($fp)");
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      System.out.println("  lw $ra, -4($fp)\n  addu $sp, $sp, "+stacksize+"\n  jr $ra");
      System.out.println();
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      System.out.println("  .text\n  .globl _halloc");
      System.out.println("_halloc:");
      System.out.println("  li $v0, 9\n  syscall\n  jr $ra\n");
      System.out.println("  .text\n  .globl _print");
      System.out.println("_print:");
      System.out.println("  li $v0, 1\n  syscall\n  la $a0, newl\n  li $v0, 4\n  syscall\n  jr $ra\n");
      System.out.println("  .data\n  .align   0");
      System.out.println("newl:    .asciiz \"\\n\"\n  .data\n  .align   0");
      System.out.println("str_er:  .asciiz \" ERROR: abnormal termination\\n \"");
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      labelflag = 1;
      n.f0.accept(this, argu);
      labelflag = 0;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String lab = n.f0.f0.toString();
      System.out.println("  .text\n  .globl  "+lab);
      System.out.println(lab+":");
      n.f1.accept(this, argu);
      procvar1 = Integer.parseInt(n.f2.accept(this, argu).toString());
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      procvar2 = Integer.parseInt(n.f5.accept(this, argu).toString());
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      procvar3 = Integer.parseInt(n.f8.accept(this, argu).toString());
      Integer stacksize = (procvar2+2)*4;
      if(procvar3>4){
        stacksize=(procvar3-4+procvar2+2)*4;
      }
      System.out.println("  sw $fp, -8($sp)\n  move $fp, $sp\n  subu $sp, $sp, "+stacksize+"\n  sw $ra, -4($fp)");
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      System.out.println("  lw $ra, -4($fp)\n  lw $fp, "+((Integer)(stacksize-8)).toString()+"($sp)\n  addu $sp, $sp, "+stacksize+"\n  jr $ra ");
      System.out.println();
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("  nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("  li $v0 4\n la $a0, str_er\n  syscall\n  li $v0, 10\n  syscall");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = n.f1.accept(this, argu).toString();
      String lab = n.f2.accept(this, argu).toString();
      System.out.println("  beqz $"+reg+" "+lab);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String lab = n.f1.f0.toString();
      System.out.println("  b  "+lab);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg1 = n.f1.accept(this, argu).toString();
      String lit = n.f2.accept(this, argu).toString();
      String reg2 = n.f3.accept(this, argu).toString();
      System.out.println("  sw $"+reg2+", "+lit+"($"+reg1+")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg1 = n.f1.accept(this, argu).toString();
      String reg2 = n.f2.accept(this, argu).toString();
      String lit = n.f3.accept(this, argu).toString();
      System.out.println("  lw $"+reg1+", "+lit+"($"+reg2+")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = n.f1.accept(this, argu).toString();
      argu = (A)reg;
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String mysmexp = n.f1.accept(this, argu).toString();
      int splitind = mysmexp.indexOf('|');
      String smexp = mysmexp.substring(0,splitind);
      int smgoto = Integer.parseInt(mysmexp.substring(splitind+1));
      switch(smgoto){
        case 0: System.out.println("  move $a0 $"+smexp); break;
        case 1: System.out.println("  li $a0 "+smexp); break;
        case 2: System.out.println("  la $a0 "+smexp); break;
      }
      System.out.println("  jal _print");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = n.f1.accept(this, argu).toString();
      String spillarg = n.f2.accept(this, argu).toString();
      System.out.println("  lw $"+reg+", "+spillarg);
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String spillarg = n.f1.accept(this, argu).toString();
      String reg = n.f2.accept(this, argu).toString();
      System.out.println("  sw $"+reg+", "+spillarg);
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer lit = Integer.parseInt(n.f1.accept(this, argu).toString());
      String reg = n.f2.accept(this, argu).toString();
      System.out.println("  sw $"+reg+" "+((Integer)((lit-1)*4)).toString()+"($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String mysmexp = n.f1.accept(this, argu).toString();
      int splitind = mysmexp.indexOf('|');
      String smexp = mysmexp.substring(0,splitind);
      int smgoto = Integer.parseInt(mysmexp.substring(splitind+1));
      switch(smgoto){
        case 0: System.out.println("  jalr $"+smexp); break;
        case 2: System.out.println("  jal "+smexp); break;
      }
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      if(n.f0.which==2){
        String mysmexp = n.f0.accept(this, argu).toString();
        int splitind = mysmexp.indexOf('|');
        String smexp = mysmexp.substring(0,splitind);
        int smgoto = Integer.parseInt(mysmexp.substring(splitind+1));
        switch(smgoto){
          case 0: System.out.println("  move $"+(String)argu+" $"+smexp); break;
          case 1: System.out.println("  li $"+(String)argu+" "+smexp); break;
          case 2: System.out.println("  la $"+(String)argu+" "+smexp); break;
          }
      }
      else{
        n.f0.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String mysmexp = n.f1.accept(this, argu).toString();
      int splitind = mysmexp.indexOf('|');
      String smexp = mysmexp.substring(0,splitind);
      int smgoto = Integer.parseInt(mysmexp.substring(splitind+1));
      switch(smgoto){
        case 0: System.out.println("  move $a0 $"+smexp+"\n  jal _halloc\n  move $"+(String)argu+" $v0"); break;
        case 1: System.out.println("  li $a0 "+smexp+"\n  jal _halloc\n  move $"+(String)argu+" $v0"); break;
      }
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String op = n.f0.accept(this, argu).toString();
      String reg = n.f1.accept(this, argu).toString();
      String mysmexp = n.f2.accept(this, argu).toString();
      int splitind = mysmexp.indexOf('|');
      String smexp = mysmexp.substring(0,splitind);
      int smgoto = Integer.parseInt(mysmexp.substring(splitind+1));
      switch(smgoto){
        case 0: System.out.println("  "+op+" $"+(String)argu+", $"+reg+", $"+smexp); break;
        case 1: {
          if(op.equals("slt")){
            op = "slti";
          }
          System.out.println("  "+op+" $"+(String)argu+", $"+reg+", "+smexp);
          break;
        }
      }
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    *       | "BITOR"
    *       | "BITAND"
    *       | "LSHIFT"
    *       | "RSHIFT"
    *       | "BITXOR"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      switch(n.f0.which){
        case 0: return (R)"slt ";
        case 1: return (R)"add ";
        case 2: return (R)"sub ";
        case 3: return (R)"mul ";
        case 4: return (R)"div ";
        case 5: return (R)"or ";
        case 6: return (R)"and ";
        case 7: return (R)"sll ";
        case 8: return (R)"srl ";
        case 9: return (R)"xor ";
      }
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int lit = Integer.parseInt((String)n.f1.accept(this, argu));
      int temp=0;
      if(procvar1>4){
        temp = procvar1-4;
        if(lit<temp){
          return (R)(" "+((Integer)(lit*4)).toString()+"($fp) ");
        }
      }
      lit = lit-temp;
      if(procvar3>4){
        lit = lit + (procvar3-4);
      }
      return (R)(" "+((Integer)(lit*4)).toString()+"($sp) ");
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = (R)n.f0.accept(this, argu).toString();
      int go = n.f0.which;
      _ret = (R)(_ret.toString()+"|"+((Integer)go).toString());
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      switch(n.f0.which){
        case 0: return (R)"a0";
        case 1: return (R)"a1";
        case 2: return (R)"a2";
        case 3: return (R)"a3";
        case 4: return (R)"t0";
        case 5: return (R)"t1";
        case 6: return (R)"t2";
        case 7: return (R)"t3";
        case 8: return (R)"t4";
        case 9: return (R)"t5";
        case 10: return (R)"t6";
        case 11: return (R)"t7";
        case 12: return (R)"s0";
        case 13: return (R)"s1";
        case 14: return (R)"s2";
        case 15: return (R)"s3";
        case 16: return (R)"s4";
        case 17: return (R)"s5";
        case 18: return (R)"s6";
        case 19: return (R)"s7";
        case 20: return (R)"t8";
        case 21: return (R)"t9";
        case 22: return (R)"v0";
        case 23: return (R)"v1";
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret = (R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      String lab = n.f0.toString();
      if(labelflag == 1){
        System.out.print(lab+": ");
      }
      labelflag = 0;
      _ret = (R)lab;
      return _ret;
   }

   /**
    * f0 -> "// Number of  vars after packing ="
    * f1 -> IntegerLiteral()
    * f2 -> "; Number of Spilled vars ="
    * f3 -> IntegerLiteral()
    */
   public R visit(VariablePackingInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

}
